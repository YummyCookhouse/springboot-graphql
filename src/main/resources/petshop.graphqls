# Define how to read data from server
type Query {
    # Get all pets
    pets: [Pet],
    # Get certain pet with unique id
    pet(id: Int): Pet
}

# Update data in server
type Mutation {
    saveDog(id:Int, name: String, age: Int, ownerId: Int, license: String) : Dog @deprecated(reason: "Replaced by addPet"),
    # Add pet to data list
    addPet(pet: PetInput): Pet
}

type Owner {
    name: String
    age: Int
    address: String
    identifier(type: PhotoIDType): String
}

type Dog {
    id: Int
    type: Animal!
    name: String
    age: Int
    license: String
    owner: Owner
}

type Bird {
    id: Int
    type: Animal!
    name: String
    age: Int
    wings: Int
    owner: Owner
}

union Pet = Dog | Bird

input PetInput {
    id: Int
    type: Animal
    name: String
    age: Int
    ownerId: Int
    license: String
    wings: Int
}

enum Animal {
    DOG
    BIRD
}

enum PhotoIDType {
    ID,
    PASSPORT,
    DRIVELICENSE
}

schema {
    query: Query
    mutation: Mutation
}
